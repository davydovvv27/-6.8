def heapify(arr, n, i):
    """
    Преобразует поддерево в двоичную кучу
    """
    largest = i  # Инициализируем наибольший элемент как корень
    left = 2 * i + 1  # левый = 2*i + 1
    right = 2 * i + 2  # правый = 2*i + 2
    
    # Проверяем существует ли левый дочерний элемент больший, чем корень
    if left < n and arr[i] < arr[left]:
        largest = left
        
    # Проверяем существует ли правый дочерний элемент больший, чем корень
    if right < n and arr[largest] < arr[right]:
        largest = right
        
    # Меняем корень, если нужно
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # своп
        
        # Рекурсивно преобразуем затронутое поддерево
        heapify(arr, n, largest)

def heap_sort(arr):
    """
    Основная функция для пирамидальной сортировки
    """
    n = len(arr)
    
    # Построение max-heap
    print("Построение max-heap:")
    for i in range(n // 2 - 1, -1, -1):
        print(f"  heapify от индекса {i}: {arr}")
        heapify(arr, n, i)
    
    print(f"Max-heap построен: {arr}")
    
    # Один за другим извлекаем элементы
    print("\nИзвлечение элементов:")
    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # меняем корень с последним элементом
        print(f"  Перемещен {arr[i]} в позицию {i}, массив: {arr}")
        heapify(arr, i, 0)

# Пример использования:
if __name__ == "__main__":
    arr = [12, 11, 13, 5, 6, 7]
    print("Исходный массив:", arr)
    heap_sort(arr)
    print("Отсортированный массив:", arr)
