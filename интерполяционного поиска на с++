#include <iostream>
#include <vector>

using namespace std;

// Рекурсивная версия интерполяционного поиска
int interpolationSearchRecursive(const vector<int>& arr, int lo, int hi, int x) {
    if (lo <= hi && x >= arr[lo] && x <= arr[hi]) {
        // Вычисляем позицию с помощью интерполяционной формулы
        int pos = lo + (((hi - lo) * (x - arr[lo])) / (arr[hi] - arr[lo]));
        
        // Состояние, если цель найдена
        if (arr[pos] == x) {
            return pos;
        }
        
        // Если x больше, x находится в правом подмассиве
        if (arr[pos] < x) {
            return interpolationSearchRecursive(arr, pos + 1, hi, x);
        }
        
        // Если x меньше, x находится в левом подмассиве
        if (arr[pos] > x) {
            return interpolationSearchRecursive(arr, lo, pos - 1, x);
        }
    }
    return -1;
}

// Итеративная версия интерполяционного поиска
int interpolationSearchIterative(const vector<int>& arr, int x) {
    int lo = 0;
    int hi = arr.size() - 1;
    
    while (lo <= hi && x >= arr[lo] && x <= arr[hi]) {
        // Вычисляем позицию с помощью интерполяционной формулы
        int pos = lo + (((hi - lo) * (x - arr[lo])) / (arr[hi] - arr[lo]));
        
        // Состояние, если цель найдена
        if (arr[pos] == x) {
            return pos;
        }
        
        // Если x больше, x находится в правом подмассиве
        if (arr[pos] < x) {
            lo = pos + 1;
        } 
        // Если x меньше, x находится в левом подмассиве
        else {
            hi = pos - 1;
        }
    }
    return -1;
}

// Версия с подробным выводом процесса поиска
int interpolationSearchDetailed(const vector<int>& arr, int x) {
    int lo = 0;
    int hi = arr.size() - 1;
    int step = 1;
    
    cout << "Начинаем интерполяционный поиск элемента " << x << endl;
    cout << "Массив: ";
    for (int num : arr) cout << num << " ";
    cout << endl;
    
    while (lo <= hi && x >= arr[lo] && x <= arr[hi]) {
        // Вычисляем позицию с помощью интерполяционной формулы
        int pos = lo + (((hi - lo) * (x - arr[lo])) / (arr[hi] - arr[lo]));
        
        cout << "\nШаг " << step << ":" << endl;
        cout << "  lo = " << lo << ", hi = " << hi << endl;
        cout << "  Формула: pos = " << lo << " + ((" << hi << " - " << lo 
             << ") * (" << x << " - " << arr[lo] << ")) / (" 
             << arr[hi] << " - " << arr[lo] << ")" << endl;
        cout << "  Вычисленная позиция: " << pos << endl;
        cout << "  arr[" << pos << "] = " << arr[pos] << endl;
        
        // Состояние, если цель найдена
        if (arr[pos] == x) {
            cout << "  ✓ Элемент найден!" << endl;
            return pos;
        }
        
        // Если x больше, x находится в правом подмассиве
        if (arr[pos] < x) {
            cout << "  " << arr[pos] << " < " << x << " → идем вправо" << endl;
            lo = pos + 1;
        } 
        // Если x меньше, x находится в левом подмассиве
        else {
            cout << "  " << arr[pos] << " > " << x << " → идем влево" << endl;
            hi = pos - 1;
        }
        step++;
    }
    
    cout << "\n✗ Элемент не найден" << endl;
    return -1;
}

int main() {
    vector<int> arr = {10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47};
    
    cout << "=== Рекурсивная версия ===" << endl;
    int target1 = 18;
    int result1 = interpolationSearchRecursive(arr, 0, arr.size() - 1, target1);
    if (result1 != -1) {
        cout << "Элемент " << target1 << " найден на позиции: " << result1 << endl;
    } else {
        cout << "Элемент " << target1 << " не найден" << endl;
    }
    
    cout << "\n=== Итеративная версия ===" << endl;
    int target2 = 33;
    int result2 = interpolationSearchIterative(arr, target2);
    if (result2 != -1) {
        cout << "Элемент " << target2 << " найден на позиции: " << result2 << endl;
    } else {
        cout << "Элемент " << target2 << " не найден" << endl;
    }
    
    cout << "\n=== Детальная версия ===" << endl;
    int target3 = 20;
    int result3 = interpolationSearchDetailed(arr, target3);
    
    cout << "\n=== Поиск несуществующего элемента ===" << endl;
    int target4 = 25;
    int result4 = interpolationSearchIterative(arr, target4);
    if (result4 != -1) {
        cout << "Элемент " << target4 << " найден на позиции: " << result4 << endl;
    } else {
        cout << "Элемент " << target4 << " не найден" << endl;
    }
    
    cout << "\n=== Сравнение с бинарным поиском ===" << endl;
    vector<int> uniformArr = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};
    int target5 = 13;
    
    cout << "Равномерно распределенный массив: ";
    for (int num : uniformArr) cout << num << " ";
    cout << endl;
    
    int resultInterpolation = interpolationSearchIterative(uniformArr, target5);
    cout << "Интерполяционный поиск: элемент найден на позиции " << resultInterpolation << endl;
    
    return 0;
}
